package org.dapath.internal;

/**
 * Ozan Ozisik
 */
import org.dapath.internal.dapath.Parameters;
import org.dapath.internal.dapath.RunDApath;
import java.awt.Component;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.model.*;
import org.cytoscape.view.model.CyNetworkView;
import org.cytoscape.work.TaskMonitor;
import org.dapath.internal.keggoperations.KEGGDownloader;

public class ProjectStartMenu extends javax.swing.JPanel implements CytoPanelComponent {

    CyApplicationManager cyApplicationManager;
    CyNetworkManager cyNetworkManager;
    CyNetworkFactory cyNetworkFactory;
    CySwingApplication cyDesktopService;
    CyNetwork currentnetwork;
    TaskMonitor tm;
    CyNetworkView currentnetworkview;
    public CyActivator cyactivator;
    static String edgeWeightAttribute;
    public static CyColumn edgeWeightAttributeColumn;
    public static final String DEFAULT_WEIGHT_ATTRIBUTE = "DefaultWeightTakenAsOne";
    public int ctrl;
    public int stepcounter = 0;

    public ProjectStartMenu(CyActivator cyactivator) {
        initComponents();
        
        fillParametersInGUI();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelKeggFolder = new javax.swing.JLabel();
        jLabelExperimentFile = new javax.swing.JLabel();
        jLabelNumberOfTopPathwayToVisualize = new javax.swing.JLabel();
        jTextFieldKeggFolder = new javax.swing.JTextField();
        jTextFieldExperimentFile = new javax.swing.JTextField();
        jTextFieldNumberOfTopPathwayToVisualize = new javax.swing.JTextField();
        jCheckBoxSkipFirstLineOfExperimentFile = new javax.swing.JCheckBox();
        jCheckBoxCrosstalkHandling = new javax.swing.JCheckBox();
        jTextFieldCrosstalkHandlingLimit = new javax.swing.JTextField();
        jButtonRunDAPath = new javax.swing.JButton();
        jLabelOutputFolder = new javax.swing.JLabel();
        jTextFieldOutputFolder = new javax.swing.JTextField();
        jButtonKEGGDownload = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setRequestFocusEnabled(false);

        jLabelKeggFolder.setText("Kegg Folder");

        jLabelExperimentFile.setText("Experiment File");
        jLabelExperimentFile.setToolTipText("");

        jLabelNumberOfTopPathwayToVisualize.setText("<html>Number of top pathways to visualize</html>");

        jTextFieldNumberOfTopPathwayToVisualize.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jCheckBoxSkipFirstLineOfExperimentFile.setSelected(true);
        jCheckBoxSkipFirstLineOfExperimentFile.setText("<html>Skip first line of experiment file</html>");

        jCheckBoxCrosstalkHandling.setSelected(true);
        jCheckBoxCrosstalkHandling.setText("<html>Crosstalk handling for genes with pathway membership greater than</html>");

        jTextFieldCrosstalkHandlingLimit.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButtonRunDAPath.setText("Run DAPath");
        jButtonRunDAPath.setToolTipText("");
        jButtonRunDAPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunDAPathActionPerformed(evt);
            }
        });

        jLabelOutputFolder.setText("Output Folder");

        jButtonKEGGDownload.setText("Download KEGG Files");
        jButtonKEGGDownload.setActionCommand("Download KEGG Files");
        jButtonKEGGDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKEGGDownloadActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(27, 27, 27)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCheckBoxSkipFirstLineOfExperimentFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 268, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabelExperimentFile)
                            .add(jLabelKeggFolder)
                            .add(jCheckBoxCrosstalkHandling, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 209, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabelNumberOfTopPathwayToVisualize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 185, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabelOutputFolder))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jTextFieldExperimentFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .add(jTextFieldKeggFolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .add(jTextFieldNumberOfTopPathwayToVisualize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jTextFieldCrosstalkHandlingLimit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jTextFieldOutputFolder)))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jButtonKEGGDownload, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jButtonRunDAPath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelKeggFolder)
                    .add(jTextFieldKeggFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelExperimentFile)
                    .add(jTextFieldExperimentFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelOutputFolder)
                    .add(jTextFieldOutputFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBoxSkipFirstLineOfExperimentFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelNumberOfTopPathwayToVisualize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldNumberOfTopPathwayToVisualize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCheckBoxCrosstalkHandling, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldCrosstalkHandlingLimit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButtonKEGGDownload)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButtonRunDAPath)
                .addContainerGap(663, Short.MAX_VALUE))
        );

        jButtonKEGGDownload.getAccessibleContext().setAccessibleName("Download KEGG Files");
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRunDAPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunDAPathActionPerformed
        assignParameters();
        RunDApath.runDASPA();
    }//GEN-LAST:event_jButtonRunDAPathActionPerformed

    private void jButtonKEGGDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKEGGDownloadActionPerformed
        DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd_HHmmss");
        Calendar cal = Calendar.getInstance();

        try {
            String folderName="KEGGFiles_"+dateFormat.format(cal.getTime());
            KEGGDownloader.downloadAll(folderName);
            File keggFolderDir = new File(folderName);
            jTextFieldKeggFolder.setText(keggFolderDir.getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(ProjectStartMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonKEGGDownloadActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonKEGGDownload;
    private javax.swing.JButton jButtonRunDAPath;
    private javax.swing.JCheckBox jCheckBoxCrosstalkHandling;
    private javax.swing.JCheckBox jCheckBoxSkipFirstLineOfExperimentFile;
    private javax.swing.JLabel jLabelExperimentFile;
    private javax.swing.JLabel jLabelKeggFolder;
    private javax.swing.JLabel jLabelNumberOfTopPathwayToVisualize;
    private javax.swing.JLabel jLabelOutputFolder;
    private javax.swing.JTextField jTextFieldCrosstalkHandlingLimit;
    private javax.swing.JTextField jTextFieldExperimentFile;
    private javax.swing.JTextField jTextFieldKeggFolder;
    private javax.swing.JTextField jTextFieldNumberOfTopPathwayToVisualize;
    private javax.swing.JTextField jTextFieldOutputFolder;
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }

    @Override
    public String getTitle() {
        return "DAPath";
    }

    @Override
    public Icon getIcon() {
        return null;
    }
    
    public void fillParametersInGUI(){
        
        jTextFieldNumberOfTopPathwayToVisualize.setText("30");
        jCheckBoxSkipFirstLineOfExperimentFile.setSelected(true);
        jCheckBoxCrosstalkHandling.setSelected(true);
        jTextFieldCrosstalkHandlingLimit.setText("3");
        
        try{
            Properties props = new Properties();
            FileReader fr = new FileReader(Parameters.propertiesFile);
            props.load(fr);
            
            jTextFieldKeggFolder.setText(props.getProperty("keggFolder"));
            jTextFieldExperimentFile.setText(props.getProperty("expFilePath"));
            jTextFieldOutputFolder.setText(props.getProperty("outputFolder"));
            jCheckBoxSkipFirstLineOfExperimentFile.setSelected(Boolean.parseBoolean(props.getProperty("expFile_SkipFirstLine")));
            jTextFieldNumberOfTopPathwayToVisualize.setText(props.getProperty("topPathwayNumberToBeWritten"));
            jCheckBoxCrosstalkHandling.setSelected(Boolean.parseBoolean(props.getProperty("useCrossTalkHandling")));
            jTextFieldCrosstalkHandlingLimit.setText(props.getProperty("crossTalkLimit"));
            
        }catch(Exception ex){
            
        }
    }
    
    public void assignParameters(){
        
        Parameters.keggFolder=jTextFieldKeggFolder.getText();
        Parameters.expFilePath=new String[1];
        Parameters.expFilePath[0] = jTextFieldExperimentFile.getText();
        Parameters.outputFolder=jTextFieldOutputFolder.getText();
        Parameters.expFile_SkipFirstLine=jCheckBoxSkipFirstLineOfExperimentFile.isSelected();
        Parameters.topPathwayNumberToBeWritten=Integer.parseInt(jTextFieldNumberOfTopPathwayToVisualize.getText());
        if(jCheckBoxCrosstalkHandling.isSelected()){
            Parameters.crossTalkHandlingMethod=3;
        }else{
            Parameters.crossTalkHandlingMethod=0;
        }
        Parameters.crossTalkLimit=Integer.parseInt(jTextFieldCrosstalkHandlingLimit.getText());

        //TODO jTextFieldExperimentFile2 was used for finding common paths 
        //in two experiments. This feature may be available later.
//        if(jTextFieldExperimentFile2.getText().isEmpty()){
//            Parameters.expFilePath=new String[1];
//            Parameters.expFilePath[0]=jTextFieldExperimentFile.getText();    
//        }else{
//            Parameters.expFilePath=new String[2];
//            Parameters.expFilePath[0]=jTextFieldExperimentFile.getText();
//            Parameters.expFilePath[1]=jTextFieldExperimentFile2.getText();
//        }
        
        
        try{
            Properties props = new Properties();
            props.setProperty("keggFolder",jTextFieldKeggFolder.getText());
            props.setProperty("expFilePath",jTextFieldExperimentFile.getText());
            props.setProperty("outputFolder",jTextFieldOutputFolder.getText());
            props.setProperty("expFile_SkipFirstLine",""+jCheckBoxSkipFirstLineOfExperimentFile.isSelected());
            props.setProperty("topPathwayNumberToBeWritten",jTextFieldNumberOfTopPathwayToVisualize.getText());
            props.setProperty("useCrossTalkHandling",""+jCheckBoxCrosstalkHandling.isSelected());
            props.setProperty("crossTalkLimit",jTextFieldCrosstalkHandlingLimit.getText());
            props.store(new FileWriter(Parameters.propertiesFile),"");
        }catch(Exception ex){
            
        }

        
        
    }

}